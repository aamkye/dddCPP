CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

# SET(CMAKE_C_COMPILER "clang")
# SET(CMAKE_CXX_COMPILER "clang++")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

PROJECT(DTTFP-DDD-TO-JSON VERSION 1.0.0 LANGUAGES C CXX)

OPTION(MINIFI "Use upx packer" ON)
OPTION(DEBUG "Debug flag" OFF)
OPTION(UT "Unit tests" OFF)
OPTION(BT "Binary tests" OFF)

SET(CMAKE_CXX_FLAGS "-std=c++1z -Wall -Wextra -O3")
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++ -ferror-limit=1")
ELSE()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfatal-errors")
ENDIF()

IF(DEBUG)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -rdynamic")
    SET(MINIFY OFF CACHE BOOL "")
ENDIF()

INCLUDE_DIRECTORIES(
    src
    3rdparty/chroma/include
    3rdparty/json/include
    3rdparty/utfcpp/source
)

ADD_SUBDIRECTORY(src)

ADD_EXECUTABLE(${PROJECT_NAME}
    $<TARGET_OBJECTS:${PROJECT_NAME}_CARD>
    $<TARGET_OBJECTS:${PROJECT_NAME}_STRUCTURE>
    $<TARGET_OBJECTS:${PROJECT_NAME}_UTILS>
    $<TARGET_OBJECTS:${PROJECT_NAME}_MAIN>
)

IF(MINIFI AND NOT DEBUG)
    ADD_CUSTOM_COMMAND(
        TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/upx.py ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME}
    )
ENDIF()

INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/bin)
